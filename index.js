// index.js
import puppeteer from "puppeteer";
import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";
//import cron from "node-cron";

dotenv.config();

const token = process.env.TELEGRAM_TOKEN;
const chatId = process.env.CHAT_ID;

const bot = new TelegramBot(token, { polling: false });

const pageInfo = {
  url: "https://boilerplate.solve-marketing.agency/?utm_source=test&utm_medium=test&utm_campaign=test",
  name: "Test user",
  email: "dev@support.com",
  phone: "123456789",
  link: "test.link",
  message: "contacts test message",
};

async function checkFormSubmission() {
  const browser = await puppeteer.launch({
    headless: true, // –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ headless –∫—Ä–∞—â–µ —Å—Ç–∞–≤–∏—Ç–∏ true
    args: [
      "--no-sandbox",
      "--disable-setuid-sandbox",
      "--disable-blink-features=AutomationControlled",
    ]
  });

  const page = await browser.newPage();

  // Set a common user agent string
  await page.setUserAgent(
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
  );

  // Hide webdriver flag
  await page.evaluateOnNewDocument(() => {
    Object.defineProperty(navigator, "webdriver", {
      get: () => false,
    });
  });

  // Navigate to the page
  await page.goto(pageInfo.url, { waitUntil: "networkidle2" });

  page.on("console", (msg) => {
    console.log("[Browser log]:", msg.text());
  });

  // Set the values of the input fields
  await page.evaluate((info) => {
    const simulateInput = (el, value) => {
      el.focus();
      el.value = value;
      el.dispatchEvent(new Event("input", { bubbles: false }));
      el.dispatchEvent(new Event("change", { bubbles: false }));
      el.blur();
    };

    const form = document.querySelector(".wpcf7-form");
    if (!form) return;

    console.log(form);

    const links = form.querySelectorAll("a");
    links.forEach((a) => a.removeAttribute("href"));

    const inputs = [
      ...form.querySelectorAll(`
      .wpcf7-form input[type="text"]:not([name*="honeypot"], [name^="utm"], [name^="ref"], [name^="gid"]),
      .wpcf7-form input[type="tel"],
      .wpcf7-form input[type="email"],
      .wpcf7-form textarea
    `),
    ];

    inputs.forEach((input) => {
      const name = input.getAttribute("name");

      if (name === "your-name") simulateInput(input, info.name);
      if (name === "your-email") simulateInput(input, info.email);
      if (name === "your-tel") simulateInput(input, info.phone);
      if (name === "your-links") simulateInput(input, info.link);
      if (name === "message") simulateInput(input, info.message);
    });

    const checkboxInputs = form.querySelectorAll(
      '.wpcf7-form input[type="checkbox"]'
    );

    if (checkboxInputs.length) {
      checkboxInputs.forEach((cb) => {
        if (!cb.checked) {
          cb.checked = true;
          cb.dispatchEvent(new Event("change", { bubbles: true }));
        }
      });
    }
  }, pageInfo);

  // Submit —Ñ–æ—Ä–º–∏
  await page.evaluate(() => {
    const form = document.querySelector(".wpcf7-form");
    if (form)
      form.dispatchEvent(
        new Event("submit", { bubbles: true, cancelable: true })
      );
  });

  // –ß–µ–∫–∞—î–º–æ –ø–æ—è–≤–∏ –ø–æ–ø–∞–ø—É —è–∫ –æ–∑–Ω–∞–∫—É —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
  try {
    await page.waitForSelector("#consult-popup", {
      visible: true,
      timeout: 15000,
    });
    console.log("‚úÖ –§–æ—Ä–º–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ");
  } catch (err) {
    console.log("‚ö†Ô∏è –§–æ—Ä–º–∞ –ù–ï –±—É–ª–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: " + err.message);
    await bot.sendMessage(
      chatId,
      `‚ö†Ô∏è –§–æ—Ä–º–∞ –Ω–∞ —Å–∞–π—Ç—ñ –Ω–µ –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É: ${pageInfo.url}`
    );
  }

  await browser.close();
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–∂–µ–Ω –¥–µ–Ω—å –æ 12:00 –∑–∞ –ö–∏—î–≤–æ–º
// Render –ø—Ä–∞—Ü—é—î –≤ UTC, —Ç–æ–º—É –ö–∏—ó–≤ (UTC+3 –≤–ª—ñ—Ç–∫—É, UTC+2 –≤–∑–∏–º–∫—É).
// –î–ª—è 12:00 –ö–∏—î–≤–∞ -> —Å—Ç–∞–≤–∏–º–æ 9:00 (–ª—ñ—Ç–æ) –∞–±–æ 10:00 (–∑–∏–º–∞).
//cron.schedule("0 9 * * *", () => {
  console.log("‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–æ—Ä–º–∏...");
  checkFormSubmission();
//});

console.log("üöÄ Service started, job scheduled.");
